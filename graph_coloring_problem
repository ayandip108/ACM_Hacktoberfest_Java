import java.util.*;

class Graph {
    private final int V;
    private final LinkedList<Integer>[] adj;

    Graph(int v) {
        V = v;
        adj = new LinkedList[V];
        for (int i = 0; i < V; i++) {
            adj[i] = new LinkedList<>();
        }
    }

    void addEdge(int v, int w) {
        adj[v].add(w);
        adj[w].add(v); // The graph is undirected
    }

    void greedyColoring() {
        int result[] = new int[V];

        // Assign the first color to the first vertex
        result[0] = 0;

        // Initialize the remaining V-1 vertices as unassigned
        for (int u = 1; u < V; u++) {
            result[u] = -1; // no color is assigned to u
        }

        // A temporary array to store the available colors. False value of available[cr]
        // would mean that the color cr is assigned to one of its adjacent vertices
        boolean[] available = new boolean[V];
        Arrays.fill(available, true);

        // Assign colors to the remaining V-1 vertices
        for (int u = 1; u < V; u++) {
            // Process all adjacent vertices and flag their colors as unavailable
            Iterator<Integer> it = adj[u].iterator();
            while (it.hasNext()) {
                int i = it.next();
                if (result[i] != -1) {
                    available[result[i]] = false;
                }
            }

            // Find the first available color
            int cr;
            for (cr = 0; cr < V; cr++) {
                if (available[cr]) {
                    break;
                }
            }

            result[u] = cr; // Assign the found color

            // Reset the values back to true for the next iteration
            Arrays.fill(available, true);
        }

        // Print the result
        for (int u = 0; u < V; u++) {
            System.out.println("Vertex " + u + " ---> Color " + result[u]);
        }
    }
}

public class GraphColoringProblem {
    public static void main(String[] args) {
        Graph g1 = new Graph(5);
        g1.addEdge(0, 1);
        g1.addEdge(0, 2);
        g1.addEdge(1, 2);
        g1.addEdge(1, 3);
        g1.addEdge(2, 3);
        g1.addEdge(3, 4);
        System.out.println("Coloring of graph 1");
        g1.greedyColoring();
    }
}
